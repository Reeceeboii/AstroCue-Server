// <auto-generated />
using System;
using AstroCue.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AstroCue.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220419155554_ObservationLogs")]
    partial class ObservationLogs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AstroCue.Server.Entities.AstroCueUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("AstroCueUsers");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.AstronomicalObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ApparentMagnitude")
                        .HasColumnType("real");

                    b.Property<int>("CatalogueIdentifier")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OfficiallyNamed")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AstronomicalObjects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AstronomicalObject");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AstronomicalObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObservationLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AstronomicalObjectId");

                    b.HasIndex("ObservationLocationId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.ObservationLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AstroCueUserId")
                        .HasColumnType("int");

                    b.Property<string>("BortleDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BortleScaleValue")
                        .HasColumnType("int");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AstroCueUserId");

                    b.ToTable("ObservationLocations");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.ObservationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AstroCueUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CalculatedBestTimeToObserveUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<float>("ObservationLocationLatitude")
                        .HasColumnType("real");

                    b.Property<float>("ObservationLocationLongitude")
                        .HasColumnType("real");

                    b.Property<string>("ObservationLocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservedAstronomicalObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TextualDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TypeOfObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AstroCueUserId");

                    b.ToTable("ObservationLogs");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AstroCueUserId")
                        .HasColumnType("int");

                    b.Property<string>("AstronomicalObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AstronomicalObjectReportIsTargeting")
                        .HasColumnType("int");

                    b.Property<DateTime>("BestTimeToObserveUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MoreInformationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObservationLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AstroCueUserId");

                    b.HasIndex("ObservationLocationId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.HipObject", b =>
                {
                    b.HasBaseType("AstroCue.Server.Entities.AstronomicalObject");

                    b.HasDiscriminator().HasValue("HipObject");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.NgcObject", b =>
                {
                    b.HasBaseType("AstroCue.Server.Entities.AstronomicalObject");

                    b.Property<bool>("PartOfMultipleSystem")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("NgcObject");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.AstronomicalObject", b =>
                {
                    b.OwnsOne("AstroCue.Server.Entities.Owned.Declination", "Declination", b1 =>
                        {
                            b1.Property<int>("AstronomicalObjectId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Degrees")
                                .HasColumnType("int");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int");

                            b1.Property<double>("Seconds")
                                .HasColumnType("float");

                            b1.HasKey("AstronomicalObjectId");

                            b1.ToTable("AstronomicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("AstronomicalObjectId");
                        });

                    b.OwnsOne("AstroCue.Server.Entities.Owned.RightAscension", "RightAscension", b1 =>
                        {
                            b1.Property<int>("AstronomicalObjectId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Hours")
                                .HasColumnType("int");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int");

                            b1.Property<double>("Seconds")
                                .HasColumnType("float");

                            b1.HasKey("AstronomicalObjectId");

                            b1.ToTable("AstronomicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("AstronomicalObjectId");
                        });

                    b.Navigation("Declination")
                        .IsRequired();

                    b.Navigation("RightAscension")
                        .IsRequired();
                });

            modelBuilder.Entity("AstroCue.Server.Entities.Observation", b =>
                {
                    b.HasOne("AstroCue.Server.Entities.AstronomicalObject", "AstronomicalObject")
                        .WithMany("Observations")
                        .HasForeignKey("AstronomicalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AstroCue.Server.Entities.ObservationLocation", "ObservationLocation")
                        .WithMany("Observations")
                        .HasForeignKey("ObservationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AstronomicalObject");

                    b.Navigation("ObservationLocation");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.ObservationLocation", b =>
                {
                    b.HasOne("AstroCue.Server.Entities.AstroCueUser", "AstroCueUser")
                        .WithMany("ObservationLocations")
                        .HasForeignKey("AstroCueUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AstroCueUser");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.ObservationLog", b =>
                {
                    b.HasOne("AstroCue.Server.Entities.AstroCueUser", null)
                        .WithMany("ObservationLogs")
                        .HasForeignKey("AstroCueUserId");

                    b.OwnsOne("AstroCue.Server.Entities.Owned.AltAz", "HorizontalCoordinates", b1 =>
                        {
                            b1.Property<int>("ObservationLogId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<float>("Altitude")
                                .HasColumnType("real");

                            b1.Property<float>("Azimuth")
                                .HasColumnType("real");

                            b1.HasKey("ObservationLogId");

                            b1.ToTable("ObservationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ObservationLogId");
                        });

                    b.OwnsOne("AstroCue.Server.Entities.Owned.WeatherForecast", "WeatherForecast", b1 =>
                        {
                            b1.Property<int>("ObservationLogId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CloudCoveragePercent")
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("HumidityPercent")
                                .HasColumnType("int");

                            b1.Property<float>("ProbabilityOfPrecipitation")
                                .HasColumnType("real");

                            b1.Property<DateTime>("Sunrise")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Sunset")
                                .HasColumnType("datetime2");

                            b1.Property<int>("TemperatureCelcius")
                                .HasColumnType("int");

                            b1.Property<float>("WindSpeedMetersPerSec")
                                .HasColumnType("real");

                            b1.HasKey("ObservationLogId");

                            b1.ToTable("ObservationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ObservationLogId");
                        });

                    b.Navigation("HorizontalCoordinates")
                        .IsRequired();

                    b.Navigation("WeatherForecast")
                        .IsRequired();
                });

            modelBuilder.Entity("AstroCue.Server.Entities.Report", b =>
                {
                    b.HasOne("AstroCue.Server.Entities.AstroCueUser", "AstroCueUser")
                        .WithMany("Reports")
                        .HasForeignKey("AstroCueUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AstroCue.Server.Entities.ObservationLocation", "ObservationLocation")
                        .WithMany("Reports")
                        .HasForeignKey("ObservationLocationId");

                    b.OwnsOne("AstroCue.Server.Entities.Owned.AltAz", "HorizontalCoordinates", b1 =>
                        {
                            b1.Property<int>("ReportId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<float>("Altitude")
                                .HasColumnType("real");

                            b1.Property<float>("Azimuth")
                                .HasColumnType("real");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.OwnsOne("AstroCue.Server.Entities.Owned.WeatherForecast", "WeatherForecast", b1 =>
                        {
                            b1.Property<int>("ReportId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CloudCoveragePercent")
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("HumidityPercent")
                                .HasColumnType("int");

                            b1.Property<float>("ProbabilityOfPrecipitation")
                                .HasColumnType("real");

                            b1.Property<DateTime>("Sunrise")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Sunset")
                                .HasColumnType("datetime2");

                            b1.Property<int>("TemperatureCelcius")
                                .HasColumnType("int");

                            b1.Property<float>("WindSpeedMetersPerSec")
                                .HasColumnType("real");

                            b1.HasKey("ReportId");

                            b1.ToTable("Reports");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("AstroCueUser");

                    b.Navigation("HorizontalCoordinates")
                        .IsRequired();

                    b.Navigation("ObservationLocation");

                    b.Navigation("WeatherForecast")
                        .IsRequired();
                });

            modelBuilder.Entity("AstroCue.Server.Entities.AstroCueUser", b =>
                {
                    b.Navigation("ObservationLocations");

                    b.Navigation("ObservationLogs");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.AstronomicalObject", b =>
                {
                    b.Navigation("Observations");
                });

            modelBuilder.Entity("AstroCue.Server.Entities.ObservationLocation", b =>
                {
                    b.Navigation("Observations");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
